{"version":3,"file":"script.js","sources":["js/templates/bottlePreview.js","js/index.js"],"sourcesContent":["export function bottlePreviewTemplate (altText, imageData) {\n\n    const template = `\n    <img alt=\"${altText}\" src=\"${imageData}\" class=\"image-preview\"> \n    `;\n\n    return template;\n\n}","\"use strict\";\n\n//////////////////////\n// Imports\n//////////////////////\nimport { bottlePreviewTemplate } from './templates/bottlePreview.js';\n\n\n//////////////////////\n// DOM Elements\n//////////////////////\nconst fileInput = document.getElementById('fileInput');\nconst sectionUpload = document.getElementById('section-upload');\nconst competitorImageContainer = document.getElementById('competitor-image-container');\nconst competitorExportButton = document.getElementById('competitor-export-button');\nconst spinner = `\n    <div class=\"loading-spinner\">\n        <div class=\"loading-spinner__spinner\"></div>\n    </div>`;\n\n//////////////////////\n// Functions\n//////////////////////\n\n//==// function to put a single image in the DOM //==//\nfunction putImageInDom(imageName, imageLocation) {\n    const bottleImageDataUrl = localStorage.getItem(imageName);\n    if(bottleImageDataUrl) { //check if an image exists within localStorage\n        imageLocation.innerHTML = ''; //clear current image in the DOM\n        const imagePreviewElement = bottlePreviewTemplate('uploaded bottle', bottleImageDataUrl); //call function to populate template\n        imageLocation.insertAdjacentHTML('beforeend', imagePreviewElement); //insert into the DOM\n    };\n};\n\n//==// function to put multiple in DOM //==//\nfunction placeImagesInDom(images) { //get array of multiple image objects\n    images.forEach(function(image) {\n        const {imageName, imageLocation} = image; //destructure object\n        const bottleImageDataUrl = localStorage.getItem(imageName); // get image from local storage that matches image array\n        if(bottleImageDataUrl) { //check if an image exists within localStorage\n            const imagePreviewElement = bottlePreviewTemplate('uploaded bottle', bottleImageDataUrl); //call function to populate image template\n            imageLocation.innerHTML = ''; //clear current image in the DOM\n            imageLocation.insertAdjacentHTML('beforeend', imagePreviewElement); //insert into the DOM\n        };\n        return;\n    })\n};\n\n//==// function to create competitor image and place within DOM //==//\nfunction updateCompetitorImage() { \n    let bottleImageDataUrl = localStorage.getItem('bottle-image'); //get the image from localStorage \n    bottleImageDataUrl = Buffer.from(bottleImageDataUrl.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64'); // turn image into binary format for Jimp to read\n\n\n    const bottleImage = Jimp.read(bottleImageDataUrl) //use a Jimp function constructor and pass in Base64URL\n        .then(function(newImage) { // call promise and pass in newImage as anonymous function\n            competitorImageContainer.insertAdjacentHTML('afterbegin', spinner); //insert loading spinner into the DOM whilst updating\n            return newImage; // promise returns image when handled\n        })\n        .catch(function(err) { // catch errors that occur\n            console.error(err); //print error to the console\n        });\n\n    const backgroundImage = Jimp.read('images/background.png')\n        .then(function(backgroundImageData) {\n            return backgroundImageData; // promoise returns image when handled\n        })\n        .catch(function(err) {\n            console.error(err);\n        })\n    \n    const combinedImage = Promise.all([bottleImage, backgroundImage]); //promise.all to resolve all promises to use data from multiple images\n\n    combinedImage\n        .then(function(data) { //thenable on promise to check if resolved or rejects\n            console.log(data[1]);\n            data[1] // access the backgroundImage\n\n                /**\n                 * data[1].bitmap.width is the width of the background image\n                 * date[0].bitmap.width is the width of the bottle image\n                 * \n                 * the width of the background / 2 - the width of the bottle / 2\n                 */\n\n                .composite(data[0], ((data[1].bitmap.width/2) - (data[0].bitmap.width/2)) ,1260) // place bottle image on top at location x and y\n                .getBase64(Jimp.MIME_PNG, function(err, src) { // convert to Base64URL string\n                    localStorage.setItem(\"competitor-image-combined\", src); // set item in local storage\n                    competitorImageContainer.innerHTML = ''; //clear container for image\n                    const imagePreviewElement = bottlePreviewTemplate('uploaded bottle', src); //call function to populate template\n                    competitorImageContainer.insertAdjacentHTML('beforeend', imagePreviewElement); //insert into the DOM\n                });\n        })\n        .catch(function(err){\n            console.error(err);\n        })        \n\n}\n\n//==// Function to download a specific image from Local Storage //==//\nfunction downloadImage() {\n\n    console.log('Exported all images');\n\n    //read the image from localStorage that is intended to be downloaded\n    let downloadableImage = localStorage.getItem('competitor-image-combined'); //get the image from localStorage \n    downloadableImage = Buffer.from(downloadableImage.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64'); // turn image into binary format for Jimp to read\n\n    Jimp.read(downloadableImage) //use a Jimp function constructor and pass in Base64URL\n        .then(function(newImage) { // call promise and pass in newImage as anonymous function\n\n            console.log(newImage); //print Jimp object to DOM\n\n            newImage.getBase64(Jimp.MIME_JPEG, function(err, src) {\n                saveAs(src, \"new-image.jpg\");\n            });\n\n        })\n        .catch(function(err) {\n            console.log(err);\n        })\n        \n}\n\n\n//////////////////////\n// Event listeners\n//////////////////////\ndocument.addEventListener('click', function(e){\n\n    // check if competitor export button clicked\n    if(e.target.id === 'competitor-export-button') {\n\n        console.log('export competitor image');\n        \n    }\n\n    // check if export all button has been clicked\n    if(e.target.id === 'export-all') {\n\n        downloadImage();\n\n    }\n    \n    if(e.target.id === 'competitor-export-button') {\n\n        downloadImage();\n\n    }\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n    const imagesToUpdate = [\n        {\n            imageName: 'bottle-image',\n            imageLocation: sectionUpload\n        },\n        {\n            imageName: 'competitor-image-combined',\n            imageLocation: competitorImageContainer\n        },\n    ]\n    placeImagesInDom(imagesToUpdate);\n});\nfileInput.addEventListener(\"change\", (e) => { //select file input button and pass in click event\n    if (localStorage.getItem('bottle-image')) { // guard clause check if there is image data within local storage\n        localStorage.setItem(\"bottle-image\", ''); //clear localStorage for bottle image\n    }\n    const reader = new FileReader(); //create new reader instance to convert to data url\n    reader.readAsDataURL(e.target.files[0]); //pass file into reader to convert to Data Url\n    reader.addEventListener(\"load\", () => { //add event listener to the load event\n        localStorage.setItem(\"bottle-image\", reader.result); //set local storage with result from reader instance\n        updateCompetitorImage(); // update competitor image within the DOM with new image\n        const imagesToUpdate = [\n            {\n                imageName: 'bottle-image',\n                imageLocation: sectionUpload\n            },\n            {\n                imageName: 'competitor-image-combined',\n                imageLocation: competitorImageContainer\n            },\n        ]\n        placeImagesInDom(imagesToUpdate);\n\n    });\n});\n\n\n\n    // let downloadElement = document.createElement('a'); //create link element needed for download\n    // downloadElement.setAttribute('href', downloadableImage); // set href attribuite of the link element\n    // downloadElement.setAttribute('download', 'image.jpg'); //set download attribute of the link element\n    // console.log(downloadElement);\n    // downloadElement.click(); // simulate the button click of the element"],"names":["bottlePreviewTemplate","altText","imageData","template","fileInput","document","getElementById","sectionUpload","competitorImageContainer","spinner","placeImagesInDom","images","forEach","image","imageName","imageLocation","bottleImageDataUrl","localStorage","getItem","imagePreviewElement","innerHTML","insertAdjacentHTML","updateCompetitorImage","Buffer","from","replace","bottleImage","Jimp","read","then","newImage","err","console","error","backgroundImage","backgroundImageData","combinedImage","Promise","all","data","log","composite","bitmap","width","getBase64","MIME_PNG","src","setItem","downloadImage","downloadableImage","MIME_JPEG","saveAs","addEventListener","e","target","id","imagesToUpdate","reader","FileReader","readAsDataURL","files","result"],"mappings":"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"}